[{"C:\\Users\\Hp\\Desktop\\coding-challenge-frontend\\sanjeetapp\\src\\index.js":"1","C:\\Users\\Hp\\Desktop\\coding-challenge-frontend\\sanjeetapp\\src\\App.js":"2","C:\\Users\\Hp\\Desktop\\coding-challenge-frontend\\sanjeetapp\\src\\components\\FormControl.js":"3","C:\\Users\\Hp\\Desktop\\coding-challenge-frontend\\sanjeetapp\\src\\components\\ListPopulate.js":"4","C:\\Users\\Hp\\Desktop\\coding-challenge-frontend\\sanjeetapp\\src\\components\\Emap.js":"5"},{"size":142,"mtime":1632732202526,"results":"6","hashOfConfig":"7"},{"size":361,"mtime":1632838696765,"results":"8","hashOfConfig":"7"},{"size":5382,"mtime":1633032504518,"results":"9","hashOfConfig":"7"},{"size":1217,"mtime":1632909794313,"results":"10","hashOfConfig":"7"},{"size":612,"mtime":1632890184179,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d25oy",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Hp\\Desktop\\coding-challenge-frontend\\sanjeetapp\\src\\index.js",[],"C:\\Users\\Hp\\Desktop\\coding-challenge-frontend\\sanjeetapp\\src\\App.js",[],"C:\\Users\\Hp\\Desktop\\coding-challenge-frontend\\sanjeetapp\\src\\components\\FormControl.js",["23","24","25","26","27"],"import React, { useState, useEffect, useCallback } from 'react';\nimport ListPopulate from './ListPopulate';\nimport Emap from './Emap';\n\n\nconst dummy_data = [\n  {\n    title: 'dummytitle',\n    body: 'ab'\n  },\n  {\n    title: 'dummytitle2',\n    body: 'abc'\n  },\n  {\n    title: 'dummytitle3',\n    body: 'aop'\n  }\n\n]\n\nconst FormControl = (props) => {\n\n\n// json object data states_and_properties\n\n\nconst [jsony, setjsony] = useState(dummy_data);\n\nconst addjsonHandler = (jsony) => {\n  setjsony((prevjsony) => {\n    return [jsony, ...prevjsony];\n  });\n};\n\n// ***********\n\n\n\n  // fetch api states\n\n  const [error, setError] = useState(null);\n  const [json, setjson] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // **\n\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredBody, setEnteredBody] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredBodyTouched, setEnteredBodyTouched] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const enteredBodyIsValid = enteredBody.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const BodyInputIsInvalid = !enteredBodyIsValid && enteredBodyTouched;\n\n// fetch fetch ****************************************************************\n\n\n\n\n \n\n \n\n\n\n\n  function addMovieHandler(movie) {\n    console.log(movie);\n  }\n\n  let content = <p></p>;\n\n  if (json.length > 0) {\n    // content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n\n\n\n\n// ************************************************************************************************\n\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredBodyIsValid) { \n    formIsValid = true;\n  }\n\n  const enteredObject = {\n    title : enteredName,\n    body : enteredBody\n  }\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n  \n  };\n  const BodyInputChangeHandler = (event) => {\n    setEnteredBody(event.target.value);\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n  };\n\n  const BodyInputBlurHandler = (event) => {\n    setEnteredBodyTouched(true);\n  };\n\n\n\n  //form submission function\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n  \n    setEnteredNameTouched(true);\n    setEnteredBodyTouched(true);\n\n    if (!(enteredNameIsValid && enteredBodyIsValid)) {\n      return;\n    }\n\n    // handling errors in fetch with faulty parameters\n\n    console.log(enteredName);\n\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    setEnteredName('');\n    setEnteredBody('');\n    setEnteredNameTouched(false);\n    setEnteredBodyTouched(false);\n\n\n// fetch api json placeholder error free\n\n\n\n\n\n\n\n\n\n\n    console.log(enteredObject)\n  };\n\n  //fetxh api function\n\n\n\n\nconst[data,setData] = useState('');\nasync function FetchEntity() {\nsetError(null)\ntry {\n  const Response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    body: JSON.stringify({\n      title: enteredObject.title,\n      body: enteredObject.body,\n      userId: 1,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  })\nconst data = await Response.json();\nsetData(data)\nconsole.log(data)\n}catch(error){\n  setError(error.message);\n  console.log(\"something went wrong\")\n\n}\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  const nameInputClasses = nameInputIsInvalid\n    ? 'form-control invalid'\n    : 'form-control';\n\n\n    // fetch('https://jsonplaceholder.typicode.com/todos/1')\n    // .then(response => response.json())\n    // .then(json => console.log(json))\n\n\n   \n\n\n  return ( <>\n   <div style={{display: 'flex',justifyContent: 'space-between'}}>\n <div>\n <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Title</label>\n        <input\n          type='text'\n          id='name'\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className='error-text'>Please select a title</p>\n        )}\n      </div>\n\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Body</label>\n        <input\n          type='text'\n          id='name'\n          onChange={BodyInputChangeHandler}\n          onBlur={BodyInputBlurHandler}\n          value={enteredBody}\n        />\n        {BodyInputIsInvalid && (\n          <p className='error-text'>Please select a body</p>\n        )}\n      </div>\n\n\n      <div className='form-actions' style={{borderBottom: '2px solid green',\nmarginTop: '-15%',\ndisplay: 'inline-block',\ntransform: 'translateY(39px)'}}>\n        <button disabled={!formIsValid} style={{marginBottom: '18%',\npaddingTop: '0em',\nmarginRight: '26%'}} onClick={FetchEntity} >Submit</button>\n      </div>\n    </form>\n </div>\n<div>\n<p style={{fontSize: '18px',fontWeight: 'bold',fontFamily:'monospace',backgroundColor:'#ededed'}}>{content}</p>\n\n</div>\n   </div>\n    <div style={{marginLeft:'13%',display:'flex',justifyContent: 'space-around',paddingTop: '3em'}}>\n<ListPopulate \nprop={enteredObject}\nitems={jsony}\nfetch={data.title}\nonAddExpense={addjsonHandler}\n></ListPopulate>\n<Emap></Emap>\n</div>\n\n    </>\n  );\n};\n\nexport default FormControl;\n","C:\\Users\\Hp\\Desktop\\coding-challenge-frontend\\sanjeetapp\\src\\components\\ListPopulate.js",["28","29"],"C:\\Users\\Hp\\Desktop\\coding-challenge-frontend\\sanjeetapp\\src\\components\\Emap.js",["30","31"],{"ruleId":"32","severity":1,"message":"33","line":1,"column":27,"nodeType":"34","messageId":"35","endLine":1,"endColumn":36},{"ruleId":"32","severity":1,"message":"36","line":1,"column":38,"nodeType":"34","messageId":"35","endLine":1,"endColumn":49},{"ruleId":"32","severity":1,"message":"37","line":43,"column":16,"nodeType":"34","messageId":"35","endLine":43,"endColumn":23},{"ruleId":"32","severity":1,"message":"38","line":44,"column":21,"nodeType":"34","messageId":"35","endLine":44,"endColumn":33},{"ruleId":"32","severity":1,"message":"39","line":71,"column":12,"nodeType":"34","messageId":"35","endLine":71,"endColumn":27},{"ruleId":"32","severity":1,"message":"40","line":15,"column":11,"nodeType":"34","messageId":"35","endLine":15,"endColumn":19},{"ruleId":"32","severity":1,"message":"41","line":16,"column":11,"nodeType":"34","messageId":"35","endLine":16,"endColumn":30},{"ruleId":"42","severity":1,"message":"43","line":10,"column":60,"nodeType":"44","endLine":10,"endColumn":260},{"ruleId":"45","severity":1,"message":"46","line":10,"column":269,"nodeType":"44","endLine":10,"endColumn":304},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'setjson' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'addMovieHandler' is defined but never used.","'listitem' is assigned a value but never used.","'savejsonDataHandler' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader."]